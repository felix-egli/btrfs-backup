#!/bin/bash

COMMAND=$0

set -eu

backup_dir=''
host=''
compress='gz'
declare -A retention=( [latest]=15 [days]=30 [weeks]=12 [months]=12 [years]=20 )

function usage()
{
  cat - <<EOF
usage: $COMMAND --backup-dir DIR --host HOST {--setup|--backup|--retention}...

host:       $host
backup-dir: $backup_dir

retention:
$(
for i in ${!retention[@]} ; do
  printf '  %-9s %s\n' ${i}: ${retention[$i]}
done
)

EOF
  exit 1
}

function abort()
{
  echo ERROR: $@
  trap - EXIT
  exit 1
}

trap 'usage' EXIT

test $# -gt 0

PARAMETERS=$(
  getopt -o hB:H:sbr \
    --long help,backup-dir:,host:,setup,backup,retention,latest:,days:,weeks:,months:,years: \
    -n 'btbackup' -- "$@"
)

trap - EXIT

function _check()
{
  test "$backup_dir" || usage
  test "$host" || usage
}

function _setup()
{
  local dir

  test -d $backup_dir || abort "$backup_dir is not a directory"
  btrfs filesystem df $backup_dir > /dev/null
  for dir in snapshots snapshots/new retention retention/{latest,days,months,weeks,years}; do
    test -d $backup_dir/$dir || mkdir $backup_dir/$dir
  done
  btrfs property set $backup_dir/snapshots compression zlib
}

function _backup()
{
  local dir
  local snap=$(date +%Y.%m.%d_%H.%M)
  local parent=''

  cd $backup_dir/snapshots
  for dir in $(ls -d *.*.*_*.*) ; do
    test $(btrfs property get $dir ro) == 'ro=true' && parent=$dir
  done
  cd $OLDPWD

  if [ $parent == '' ]; then

    echo "full backup: snapshot=$snap"

    ssh $host "
      set -eu
      snapshots='/.btrfs/snapshots'
      btrfs subvolume snapshot -r / \$snapshots/$snap >&2
      btrfs send \$snapshots/$snap | pi$compress
    " | pi$compress -d | btrfs receive $backup_dir/snapshots

  else

    echo "differential backup: snapshot=$snap, parent=$parent"

    ssh $host "
      set -eu
      snapshots='/.btrfs/snapshots'
      btrfs subvolume snapshot -r / \$snapshots/$snap >&2
      btrfs send -p \$snapshots/$parent \$snapshots/$snap | pi$compress
    " | pi$compress -d | btrfs receive $backup_dir/snapshots/new

    ##
    # move snapshot
    #
    btrfs property set $backup_dir/snapshots/new/$snap ro false
    mv $backup_dir/snapshots/new/$snap $backup_dir/snapshots/$snap
    btrfs property set $backup_dir/snapshots/$snap ro true

  fi
}


function _rmlink()
{
  local snapshot

  cd $1
  ls | sort | head -n -$2 | while read snapshot ; do
    rm $snapshot
  done
  cd $OLDPWD
}

function _retention()
{
  local snapshot
  local date
  local linked

  ##
  # create links
  #
  cd $backup_dir/snapshots
  for snapshot in *.*.*_*.* ; do
    date=${snapshot//_*/}
    set -- $(date -d ${date//./-} '+%Y %m %d %W')
    y=$1 m=$2 d=$3 w=$4
    test -L $backup_dir/retention/latest/$snapshot || ln -s $snapshot $backup_dir/retention/latest/$snapshot
    test -L $backup_dir/retention/days/$y.$m.$d || ln -s $snapshot $backup_dir/retention/days/$y.$m.$d
    test -L $backup_dir/retention/weeks/$y-$w || ln -s $snapshot $backup_dir/retention/weeks/$y-$w
    test -L $backup_dir/retention/months/$y.$m || ln -s $snapshot $backup_dir/retention/months/$y.$m
    test -L $backup_dir/retention/years/$y || ln -s $snapshot $backup_dir/retention/years/$y
  done
  cd $OLDPWD

  ##
  # remove links
  #
  _rmlink $backup_dir/retention/latest ${retention[latest]}
  _rmlink $backup_dir/retention/days ${retention[days]}
  _rmlink $backup_dir/retention/weeks ${retention[weeks]}
  _rmlink $backup_dir/retention/months ${retention[months]}
  _rmlink $backup_dir/retention/years ${retention[years]}

  ##
  # get all linked snapshots
  #
  cd $backup_dir/retention
  linked=$(find -type l -printf '%l\n' | sort -u)

  ##
  # remove unlinked snapshots
  #
  cd $backup_dir/snapshots
  for snapshot in *.*.*_*.* ; do
    for i in $linked EOL ; do
      test $i == $snapshot && break
      test $i == EOL && {
        btrfs subvolume delete $snapshot
      }
    done
  done
  cd $OLDPWD
}

eval set -- "$PARAMETERS"

while true ; do
  case "$1" in
  -B|--backup-dir) backup_dir=$2 ; shift 2 ;;
  -H|--host) host=$2 ; shift 2 ;;
  --latest) (( retention[latest] = $2 )) ; shift 2 ;;
  --days) (( retention[days] = $2 )) ; shift 2 ;;
  --weeks) (( retention[weeks] = $2 )) ; shift 2 ;;
  --months) (( retention[months] = $2 )) ; shift 2 ;;
  --years) (( retention[years] = $2 )) ; shift 2 ;;
  -s|--setup) _check && _setup ; shift ;;
  -b|--backup) _check && _backup ; shift ;;
  -r|--retention) _check && _retention ; shift ;;
  --) shift ; break ;;
  *) usage ;;
  esac
done

exit 0
