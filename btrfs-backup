#!/bin/bash

COMMAND=$0

set -eu
set -o pipefail

backup_dir=''
host=''
compress='gzip -3'
uncompress='gunzip'
rootfs='@'
rootdev='sda'
rootpart='2'

btrfs_compression='zstd'

declare -A retention=(
  [latest]=5
  [days]=5
  [weeks]=4
  [months]=4
  [years]=20
)

direct_qcow2=false

lockfile=''

function usage()
{
  cat - <<EOF
Usage: $COMMAND --backup-dir=DIR --host=HOST [optional] operation..

Required:
  --backup-dir=DIR    Directory where backups are saved.
  --host=HOST         Host to backup.

Optional:
  --rootfs=ROOTFS     Subvolume name of the rootfs
  --rootdev=ROOTDEV   Block device of rootfs
  --rootpart=ROOTPART Partrition of rootfs
  --latest=COUNT      Number of latest snapshots to keep.
  --days=DAYS         Number of days to keep.
  --weeks=WEEKS       Number of weeks to keep.
  --months=MONTHS     Number of months to keep.
  --years=YEARS       Number of years to keep.

Operation:
  --setup             Setup the directory structure in the backup directory.
  --backup            Perform a backup operation.
  --retention         Perform a retention operation.
  --create-image      Create a QCOW2 image from scratch.
  --update-image      Update the RAW image with the latest backup and create a
                      QCOW2 image.
  --clone-image       Clone the RAW image into a QCOW2 image.
  --list-images       List the images.
  --mount-raw         Mount the RAW image.
  --mount-qcow2       Mount the QCOW2 image.


Current parameters:
  host:       ${host:-NOT-SET}
  backup-dir: ${backup_dir:-NOT-SET}
  rootfs:     ${rootfs:-NOT-SET}
  rootdev:    ${rootdev:-NOT-SET}
  rootpart:   ${rootpart:-NOT-SET}

  retention:
$(
for i in ${!retention[@]} ; do
  printf '    %-9s %s\n' ${i}: ${retention[$i]}
done
)

EOF
  exit 1
}

function abort()
{
  >&2 echo ERROR: $@
  trap - EXIT
  exit 1
}

trap 'usage' EXIT

test $# -gt 0

PARAMETERS=$(
  getopt -o 'hB:H:sbriucv' \
    --long 'help,backup-dir:,host:,rootfs:,rootdev:,rootpart:,\
setup,backup,retention,create-image,update-image,clone-image,mount-raw,mount-qcow2,\
latest:,days:,weeks:,months:,years:,direct-qcow2,list-images' \
    -n 'btrfs_backup' -- "$@"
)

trap - EXIT

declare -A exit_functions=()

function exit_handler()
{
  local rc=$?
  local idx

  set +eu
  for idx in ${!exit_functions[*]} ; do
    test $rc -ne 0 && echo "${exit_functions[$idx]}"
    eval "${exit_functions[$idx]}"
  done
  test "$lockfile" && rm $lockfile
  exit $rc
}

trap exit_handler EXIT

function exit_push()
{
  local idx
  idx=${#exit_functions[*]}
  exit_functions[$idx]="$@"
}

function exit_pop()
{
  local idx
  idx=${#exit_functions[*]}
  (( idx-- ))
  eval "${exit_functions[$idx]}"
  unset exit_functions[$idx]
}

function check_qemu_nbd()
{
  type qemu-nbd > /dev/null 2>&1 || {
    echo 'qemu-nbd is missing. version 4.2 or newer is required.'
    exit 1
  }

  set -- $(qemu-nbd -V | egrep '^qemu-nbd' | tr '.' ' ')

  if [ $2 -lt 4 ] || [ $2 -eq 4 -a $3 -lt 2 ] ; then
    echo "qemu-nbd version $2.$3 found. version 4.2 or newer is required."
    exit 1
  fi
}

function get_nbd()
{
  local size nbd

  modprobe nbd

  (
    cd /sys/devices/virtual/block/
    for nbd in $(ls -d nbd*) ; do
      size=$(cat $nbd/size)
      test $size -eq 0 && break
    done

    echo "/dev/$nbd"
  )
}

function nbd_mount()
{
  NBD=$(get_nbd)
  qemu-nbd -n --fork --persistent -v -c ${NBD} -f qcow2 $1
  shift
  udevadm settle; sync
  mount -t btrfs ${NBD}p$rootpart $@
}

function nbd_umount()
{
  cd $HOME
  umount $@
  test "${UUID:-}" && {
    btrfstune -M $UUID ${NBD}p$rootpart
    unset UUID
  }
  udevadm settle; sync
  qemu-nbd -d ${NBD}
  NBD=''
}

function lo_mount()
{
  DEV=$(losetup --partscan --find --show $1)
  shift
  udevadm settle; sync
  mount -t btrfs ${DEV}p$rootpart $@ || {
    losetup -d $DEV
    exit 1
  }
}

function lo_umount()
{
  cd $HOME
  umount $@
  test "${UUID:-}" && {
    btrfstune -M $UUID ${DEV}p$rootpart
    unset UUID
  }
  losetup -d ${DEV}
  DEV=''
}

function _check()
{
  test "$backup_dir" || usage
  test "$host" || usage

  image_raw="$backup_dir/images/image.raw"
  image_qcow="$backup_dir/images/image.qcow2"
  metadata="$backup_dir/metadata.tar"
}

function _get_metadata()
{
  local tmp=$(mktemp)
  exit_push "rm $tmp"

  local metatmp=$(mktemp ${metadata}.XXXX)
  exit_push "test -f $metatmp && rm $metatmp || true"

  >&2 echo "getting metadata from ${host}:"

  cd $(dirname $tmp)
  tmp=$(basename $tmp)

  >&2 echo "- fdisk-l"
  ssh $host "LANG=C; fdisk -l /dev/${rootdev}" > $tmp
  tar --file=$metatmp --create --transform="s:$tmp:fdisk-l:" $tmp

  >&2 echo "- sgdisk-backup"
  ssh $host 'bkup=$(mktemp) && sgdisk --backup=$bkup /dev/'${rootdev}' >/dev/null 2>&1 && cat $bkup' > $tmp
  tar --file=$metatmp --append --transform="s:$tmp:sgdisk-backup:" $tmp

  >&2 echo "- part1-img"
  ssh $host "dd if=/dev/${rootdev}1 bs=512 2>/dev/null" > $tmp
  tar --file=$metatmp --append --transform="s:$tmp:part1-img:" $tmp

  >&2 echo "- super-dump"
  ssh $host "btrfs inspect-internal dump-super /dev/${rootdev}$rootpart" > $tmp
  tar --file=$metatmp --append --transform="s:$tmp:super-dump:" $tmp

  >&2 echo "- fstab"
  ssh $host 'cat /etc/fstab' > $tmp
  tar --file=$metatmp --append --transform="s:$tmp:fstab:" $tmp

  mv -f $metatmp $metadata

  cd $OLDPWD

  exit_pop
  exit_pop
}

function _setup()
{
  local dir

  apt-get install -y gdisk btrfs-progs qemu-utils 
  ssh $host 'apt-get install -y gdisk btrfs-progs'

  test -d $backup_dir || abort "$backup_dir is not a directory"
  btrfs filesystem df $backup_dir > /dev/null
  for dir in snapshots snapshots/new retention retention/{latest,days,months,weeks,years} images ; do
    test -d $backup_dir/$dir || mkdir $backup_dir/$dir
  done
  btrfs property set $backup_dir/snapshots compression $btrfs_compression

  _get_metadata
}

function _backup()
{
  local dir
  local snap=$(date +%Y.%m.%d_%H.%M)
  local parent=''
  local snapshots='/.btrfs/snapshots'

  local list=$(mktemp)
  exit_push "rm $list"

  ssh $host "cd $snapshots && ls -d *.*.*_*.* 2> /dev/null" > $list

  cd $backup_dir/snapshots
  for dir in $(ls -d *.*.*_*.* 2> /dev/null) ; do
    test $(btrfs property get $dir ro) == 'ro=true' && {
      # check if parent exists
      egrep -q "^${dir}\$" $list && parent=$dir
    }
  done
  cd $OLDPWD

  if [ -z "$parent" ]; then

    >&2 echo "full backup: snapshot=$snap"

    ssh $host "
      set -eu
      btrfs subvolume snapshot -r / $snapshots/$snap >&2
      btrfs send $snapshots/$snap | $compress
    " | $uncompress | btrfs receive $backup_dir/snapshots/new

  else

    >&2 echo "differential backup: snapshot=$snap, parent=$parent"

    test -d $backup_dir/snapshots/new || mkdir $backup_dir/snapshots/new
    ssh $host "
      set -eu
      btrfs subvolume snapshot -r / $snapshots/$snap >&2
      btrfs send -p $snapshots/$parent $snapshots/$snap | $compress
    " | $uncompress | btrfs receive $backup_dir/snapshots/new

  fi

  ##
  # move snapshot
  #
  btrfs property set -f $backup_dir/snapshots/new/$snap ro false
  mv $backup_dir/snapshots/new/$snap $backup_dir/snapshots/$snap
  btrfs property set $backup_dir/snapshots/$snap ro true

  _get_metadata

  exit_pop
}

function _init_image()
{
  local image_tmp=$1

  local tmp=$(mktemp)
  exit_push "rm $tmp"

  ##
  # get size
  #
  set -- $(
    tar --file=$metadata --extract --to-stdout 'fdisk-l' \
    | grep '^Disk .* bytes, .* sectors'
  )
  bytes=$5

  ##
  # create image
  #
  if [ $direct_qcow2 == true ]; then
    check_qemu_nbd
    qemu-img create -f qcow2 $image_tmp $bytes
    udevadm settle; sync

    NBD=$(get_nbd)
    local dev=$NBD
    qemu-nbd -c ${NBD} $image_tmp
    exit_push "qemu-nbd -d ${NBD}"
  else
    truncate -s $bytes $image_tmp
    udevadm settle; sync

    ##
    # create loopback device
    #
    local dev=$(losetup --partscan --find --show $image_tmp)
    exit_push "losetup -d ${dev}"
  fi

  udevadm settle; sync

  ##
  # install MBR
  #
  # ssh $SYSTEM "dd if=/dev/${rootdev} bs=512 count=2048" > $tmp
  # dd if=$tmp of=${dev} bs=512 conv=notrunc
  # sgdisk --clear ${dev} > /dev/null 2>&1
  # udevadm settle; sync

  ##
  # clone partition table
  #
  tar --file=$metadata --extract --to-stdout 'sgdisk-backup' > $tmp
  sgdisk --load-backup=$tmp ${dev} > /dev/null
  udevadm settle; sync

  fdisk -l $dev

  ##
  # clone part 1
  #
  tar --file=$metadata --extract --to-stdout 'part1-img' > $tmp
  dd if=$tmp of=${dev}p1 bs=512
  udevadm settle; sync

  ##
  # get fsid and label
  #
  tar --file=$metadata --extract --to-stdout 'super-dump' > $tmp
  set -- $(egrep '^fsid[[:blank:]]+' $tmp)
  UUID=$2
  set -- $(egrep '^label[[:blank:]]+' $tmp)
  LABEL=$2

  ##
  # create fs
  #
  mkfs.btrfs -m single -L $LABEL ${dev}p$rootpart
  udevadm settle; sync

  ##
  # detach loopback
  #
  exit_pop

  exit_pop
}

function _restore_backup()
{
  local image_tmp=$1
  local parent=''
  local dir
  local updated=0

  local mp=$(mktemp -d)
  exit_push "rmdir $mp"

  if [ $direct_qcow2 == true ]; then
    check_qemu_nbd
    nbd_mount $image_tmp $mp -o compress=$btrfs_compression
    exit_push "nbd_umount $mp"
  else
    lo_mount $image_tmp $mp -o compress=$btrfs_compression
    exit_push "lo_umount $mp"
  fi

  test -d $mp/snapshots || mkdir $mp/snapshots

  cd $mp/snapshots
  for dir in $(ls -d *.*.*_*.* 2> /dev/null) ; do
    test $(btrfs property get $dir ro) == 'ro=true' && {
      parent="$backup_dir/snapshots/$dir"
    }
  done
  cd $OLDPWD

  ##
  # restore latest snapshot
  #
  local latest=$(ls -d $backup_dir/snapshots/*.*.*_*.* | tail -n1)
  if [ "$parent" != "$latest" ] ; then
    (
      test "$parent" && {
        >&2 echo "differential restore: snapshot=$(basename $latest), parent=$(basename $parent)"
        btrfs send -p $parent $latest
      } || {
        >&2 echo "full restore: snapshot=$(basename $latest)"
        btrfs send $latest
      }
    ) | btrfs receive $mp/snapshots
    updated=1
  else
    >&2 echo "already current: snapshot=$(basename $latest)"
  fi

  exit_pop
  exit_pop

  if [ $direct_qcow2 == true ]; then
    test $image_tmp == $image_qcow || mv $image_tmp $image_qcow
  else
    test $image_tmp == $image_raw || mv $image_tmp $image_raw
  fi

  return $updated
}

function _convert()
{
  local snap
  local sub

  check_qemu_nbd
  if [ $direct_qcow2 != true ]; then
    local tmp=$(mktemp "${image_qcow}.XXXX")
    exit_push "test -f $tmp && rm $tmp || true"

    >&2 echo "$(date) - converting $image_raw to $image_qcow"

    qemu-img convert -O qcow2 $image_raw $tmp
    mv -f $tmp $image_qcow
    >&2 echo "$(date) - qemu-img convert done"
  fi

  local mp=$(mktemp -d)
  exit_push "rmdir $mp"

  nbd_mount $image_qcow $mp -o compress=$btrfs_compression,subvolid=5
  exit_push "nbd_umount $mp"

  cd $mp

  test -d $rootfs || {
    ##
    # create the snapshot $rootfs of the latest shapshot
    #
    snap=$(cd snapshots && ls -d *.*.*_*.* | tail -n1)
    btrfs property set snapshots/$snap ro false
    btrfs subvolume snap snapshots/$snap $rootfs
    btrfs property set snapshots/$snap ro true
  }

  btrfs subvolume set-default $rootfs

  subvolumes=$(
    cat $rootfs/etc/fstab \
    | grep ',subvol=@' \
    | grep -v '^#' \
    | sed -r 's/.*subvol=(@[a-z]+).*/\1/'
  )

  for sub in $subvolumes ; do
    test -d $sub || {
      btrfs subvolume create $sub
    }
  done

  test -d @swap && {
    echo "setup @swap"
    chattr +C @swap
    btrfs property set @swap compression none
  }

  cd $rootfs

  ##
  # make sure that files in boot are compressed with zlib
  # grub < 2.04 does not understand zstd
  #
  # btrfs filesystem defragment -r -f -czlib boot
  find boot -xdev -type d -exec btrfs prop set '{}' compression zlib ';'

  ##
  # disable swap
  #
  sed -i -r \
    's:^(^.*[[:blank:]]+none[[:blank:]]+swap[[:blank:]]+sw.*):# \1:' \
    etc/fstab

  cd $HOME

  exit_pop
  exit_pop

  if [ $direct_qcow2 != true ]; then
    exit_pop
  fi
}

function _create_image()
{
  local updated=0

  if [ $direct_qcow2 == true ]; then
    check_qemu_nbd
    local image_tmp=$(mktemp ${image_qcow}.XXXX)
  else
    local image_tmp=$(mktemp ${image_raw}.XXXX)
  fi
  exit_push "test -f $image_tmp && rm $image_tmp || true"

  _init_image $image_tmp
  _restore_backup $image_tmp || updated=$?

  exit_pop

  test $updated -eq 1 && _convert || true
}

function _update_image()
{
  local updated=0

  if [ $direct_qcow2 == true ]; then
    local image_tmp=${image_qcow}
  else
    local image_tmp=${image_raw}
  fi

  _restore_backup $image_tmp || updated=$?

  test $updated -eq 1 && _convert || true
}

function _clone_image()
{
  #
  # if the option --direct-qcow2 was given, then this does not clone any 
  # image, but perform the setup.
  #

  _convert || true
}

function _mount_raw()
{
  local mp=$(mktemp -d)
  exit_push "rmdir $mp"

  lo_mount $image_raw $mp -o compress=$btrfs_compression,subvolid=5
  exit_push "lo_umount $mp"

  cd $mp
  bash
  cd $HOME

  exit_pop
  exit_pop
}

function _mount_qcow2()
{
  local mp=$(mktemp -d)
  exit_push "rmdir $mp"

  check_qemu_nbd

  nbd_mount $image_qcow $mp -o compress=$btrfs_compression,subvolid=5
  exit_push "nbd_umount $mp"

  cd $mp
  bash
  cd $HOME

  exit_pop
  exit_pop
}

function _rmlink()
{
  local snapshot

  cd $1
  ls | sort | head -n -$2 | while read snapshot ; do
    rm $snapshot
  done
  cd $OLDPWD
}

function _retention()
{
  local snapshot
  local date
  local linked

  ##
  # create links
  #
  cd $backup_dir/snapshots
  for snapshot in *.*.*_*.* ; do
    date=${snapshot//_*/}
    set -- $(date -d ${date//./-} '+%Y %m %d %W')
    y=$1 m=$2 d=$3 w=$4
    test -L $backup_dir/retention/latest/$snapshot || ln -s $snapshot $backup_dir/retention/latest/$snapshot
    test -L $backup_dir/retention/days/$y.$m.$d || ln -s $snapshot $backup_dir/retention/days/$y.$m.$d
    test -L $backup_dir/retention/weeks/$y-$w || ln -s $snapshot $backup_dir/retention/weeks/$y-$w
    test -L $backup_dir/retention/months/$y.$m || ln -s $snapshot $backup_dir/retention/months/$y.$m
    test -L $backup_dir/retention/years/$y || ln -s $snapshot $backup_dir/retention/years/$y
  done
  cd $OLDPWD

  ##
  # remove links
  #
  _rmlink $backup_dir/retention/latest ${retention[latest]}
  _rmlink $backup_dir/retention/days ${retention[days]}
  _rmlink $backup_dir/retention/weeks ${retention[weeks]}
  _rmlink $backup_dir/retention/months ${retention[months]}
  _rmlink $backup_dir/retention/years ${retention[years]}

  ##
  # get all linked snapshots
  #
  cd $backup_dir/retention
  linked=$(find -type l -printf '%l\n' | sort -u)

  ##
  # remove unlinked snapshots
  #
  cd $backup_dir/snapshots
  for snapshot in *.*.*_*.* ; do
    for i in $linked EOL ; do
      test $i == $snapshot && break
      test $i == EOL && {
        btrfs subvolume delete $snapshot
      }
    done
  done
  cd $OLDPWD

  ##
  # remove dead links
  #
  for period in latest days weeks months years ; do
    cd $backup_dir/retention/$period
    while read file target ; do
      test -d $backup_dir/snapshots/$target && {
        continue
      }
      rm $file
    done < <(find -type l -printf '%f %l\n')
  done
}

function _list_images()
{
  for file in ${image_raw} ${image_qcow} ; do
    test -f $file && {
      set -- $(du -sh $file)
      echo "$(ls -lh $file) - $1"
    }
  done
}

function _run()
{
  for cmd in $@ ; do
    >&2 echo "$(date) - $cmd"
    _${cmd}
  done
}

PATH="/usr/sbin:/sbin:/usr/local/bin:$PATH"

eval set -- "$PARAMETERS"

while true ; do
  case "$1" in
  -B|--backup-dir)
    backup_dir=$2
    lockfile="$backup_dir/.lockfile"
    exec 9> $lockfile
    flock -n 9 || {
      >&2 echo "$lockfile is locked"
      unset lockfile
      exit 1
    }
    conf=$backup_dir/btrfs-backup.conf
    test -f $conf && {
      echo "parsing $conf"
      source $conf
    }
    shift
    ;;
  -H|--host)
    host=$2
    shift
    ;;
  --rootfs)
    rootfs=$2
    shift
    ;;
  --rootdev)
    rootdev=$2
    shift
    ;;
  --rootpart)
    rootpart=$2
    shift
    ;;
  --latest)           (( retention[latest] = $2 )) ; shift ;;
  --days)             (( retention[days] = $2 )) ; shift ;;
  --weeks)            (( retention[weeks] = $2 )) ; shift ;;
  --months)           (( retention[months] = $2 )) ; shift ;;
  --years)            (( retention[years] = $2 )) ; shift ;;
  --direct-qcow2)     direct_qcow2=true ;;
  -s|--setup)         _check && _run setup ;;
  -b|--backup)        _check && _run backup ;;
  -r|--retention)     _check && _run retention ;;
  -i|--create-image)  _check && _run create_image ;;
  -u|--update-image)  _check && _run update_image ;;
  -c|--clone-image)   _check && _run clone_image ;;
  --list-images)      _check && _run list_images ;;
  --mount-raw)        _check && _run mount_raw ;;
  --mount-qcow2)      _check && _run mount_qcow2 ;;
  -v)                 set -x ;;
  --)                 break ;;
  *)                  usage ;;
  esac
  shift
done

exit 0
